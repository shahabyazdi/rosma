{
  "common": {
    "Rosma": "رُزما",
    "Next": "بعدی",
    "Previous": "قبلی",
    "Home": "خانه",
    "Installation": "نصب و راه اندازی",
    "en": "انگلیسی",
    "fa": "فارسی",
    "Keywords": "کلید واژه ها",
    "Usage": "استفاده",
    "Multiple destructuring": "گرفتن همزمان چندین متغیر",
    "Different initial values": "مقادیر اولیه متفاوت"
  },
  "home": {
    "description": [
      "Rosma یک کتابخانه مدیریت  سراسری استیت کم حجم و با استفاده آسان است که برای کامپوننت های ری اکت طراحی شده است. رزما سه API ضروری برای مدیریت وضعیت برنامه به شما ارائه می دهد: `observer` ، `useObserver`، و `withState`.",
      "برخلاف سایر کتابخانه های مدیریت استیت، راه اندازی و استفاده از Rosma فوق العاده آسان است و به گونه ای نوشته شده است که نیازی به تنظیمات اولیه و گاه پیچیده ندارد. به سادگی آن را از طریق ان پی ام (`npm i rosma`) نصب کنید و بدون کانفیگ اضافه، استفاده از آن را شروع کنید.",
      "یکی از مزایای کلیدی Rosma، نامگذاری ساده آن برای متغیرها و متدهای ستر برای متغیر ها است. برای تعریف کردن یک ستر متد برای یک متغیر، تنها کاری که باید انجام دهید این است که قبل از نام متغیر یک `set` اضافه کنید و آن را استخراج کنید. به عنوان مثال، برای تنظیم یک مقدار برای متغیر `count`، باید ستر متد مربوطه را `setCount` نامگذاری کنید.",
      "ای پی ای `observer` در رزما به شما این امکان را می دهد که با آن متغیرهای استیت سراسری را تعریف کرده  و آنها را از هر جایی در برنامه خود فراخوانی یا بروزرسانی کنید. `useObserver` یک هوک ساده برای استفاده از متغیرهای موجود در استیت، در کامپوننت ها شما ارائه می‌کند، در حالی که `withState` یک higher order component است که کامپوننت های شما را به استیت سراسری متصل میکند.",
      "به طور کلی، Rosma یک کتابخانه مدیریت استیت قدرتمند و در عین حال ساده است که فرآیند مدیریت وضعیت برنامه شما را ساده می کند. امروز آن را امتحان کنید و ببینید که چگونه می تواند روند توسعه برنامه های شما را بهبود بخشد."
    ],
    "keywords": [
      [
        "ری اکت",
        "مدیریت استیت",
        "استیت سراسری",
        "مشاهده کننده",
        "useObserver",
        "withState",
        "lightweight",
        "نصب آسان",
        "کاربر پسند",
        "npm",
        "نامگذاری",
        "متد تنظیم استیت",
        "فانکشنال کامپوننت",
        "روند کار توسعه"
      ]
    ]
  },
  "installation": {
    "howto": "برای نصب Rosma می‌توانید از `npm` یا `yarn` استفاده کنید. به سادگی دستور زیر را در پوشه پروژه خود اجرا کنید:",
    "description": [
      "با این کار آخرین نسخه کتابخانه از رجیستری npm دانلود و نصب می شود.",
      "پس از نصب، می توانید سه API اصلی (`observer`، `useObserver` و `withState`) را از بسته `rosma` ایمپورت کرده و مدیریت استیت برنامه خود را شروع کنید.",
      "مهم است که توجه داشته باشید که Rosma به هیچ گونه تنظیمات یا پیکربندی اضافی نیاز ندارد، و آن را به یک انتخاب ایده آل برای توسعه دهندگانی تبدیل می کند که به دنبال راه حل مدیریت استیت ساده و آسان هستند."
    ],
    "keywords": [
      [
        "ری اکت",
        "مدیریت استیت",
        "نصب",
        "npm",
        "استیت سراسری",
        "observer",
        "useObserver",
        "withState",
        "کم حجم",
        "آسان",
        "تنظیمات",
        "قواعد نامگذاری",
        "کامپوننت",
        "روند توسعه"
      ]
    ]
  },
  "usage": {
    "counter": {
      "description": "کامپوننت `Counter` یک مثال ساده است که نحوه استفاده از Rosma را برای مدیریت استیت در برنامه React نشان می دهد. در این مثال از `useObserver` برای ایجاد یک متغیر سراسری به نام `count` با مقدار اولیه `۰` و یک متد setter به نام `setCount` استفاده می کنیم.",
      "alt": "میتوان همین مثال بالا را با استفاده از `withState` به صورت زیر بازنویسی کرد :",
      "explain": [
        "در مثال بالا، ما از هوک `useObserver`  برای ایجاد یک متغیر سراسری به نام `count`  استفاده کرده و متد تنظیم کننده مربوط به آن را `setCount`  نام گذاری می‌کنیم. مقدار اولیه `count` روی `۰`  تنظیم شده است.",
        "برای به‌روزرسانی متغیر `count`، به سادگی متد تنظیم‌کننده مربوطه آن  `setCount`  را با مقدار جدید صدا میزنیم. در این مورد، هر بار که روی دکمه کلیک می‌شود، مقدار `count`  را با `۱` جمع میکنیم."
      ]
    },
    "order": {
      "description": "شایان ذکر است که ترتیب گرفتن متغیرها از هوک `useObserver` مهم نیست. رزما به طور خودکار مقادیر صحیح را به هر متغیر بر اساس نام آنها اختصاص می دهد.",
      "explain": "در مثال بالا، ما متغیرهای `setCount` و `count` را به ترتیبی خلاف مثال قبلی دریافت کردیم و Rosma همچنان می‌تواند مقادیر صحیح را به هر متغیر اختصاص دهد."
    },
    "caseinsensitive": {
      "description": "همچنین مهم است که توجه داشته باشید که نام‌ همه متغیر ها در استیت به حروف بزرگ و کوچک حساس نیستند. این بدان معنی است که شما می توانید هر ترکیبی از حروف بزرگ و کوچک را درهنگام گرفتن متغیرهای خود از `useObserver`  استفاده کنید.",
      "explain": [
        "در مثال بالا، ما متغیر `count` را به عنوان `CouNt` و method  تنظیم کننده متناظر آن را به عنوان `setcOunT` نامگذاری کردیم، هر دو با حروف کوچک و بزرگ ترکیبی. رزما هنوز هم قادر است مقادیر صحیح را به هر متغیر بر اساس نام آنها اختصاص دهد."
      ]
    },
    "keywords": [
      [
        "ری اکت",
        "مدیریت استیت",
        "رُزما",
        "useObserver",
        "استیت سراسری",
        "نامگذاری مقادیر",
        "استخراج مقادیر",
        "متد تنظیم کننده",
        "حساس نبودن به حروف",
        "قواعد نامگذاری"
      ]
    ]
  },
  "multipleDestructuring": {
    "description": [
      "در Rosma، شما به راحتی می توانید چندین متغیر را به طور همزمان از هوک `useObserver` دریافت کنید. این می تواند کد شما را مختصرتر و خواناتر کند.",
      "به مثال زیر توجه کنید:"
    ],
    "explain": "در کد بالا، ما به طور همزمان متغیرهای `count1`، `setCount`، `count` و `setCount1` را از هوک `useObserver` دریافت کردیم. این به ما این امکان را می دهد که مستقیماً این متغیرها را در کامپوننت خود، بدون نیاز به دسترسی به `observer` استفاده کنیم.",
    "keywords": [
      [
        "رُزما",
        "observer",
        "useObserver",
        "دریافت مقادیر",
        "مدیریت استیت",
        "توسعه فرانت اند",
        "بهینه سازی کد",
        "خوانایی کد",
        "هوک ری اکت",
        "مقادیر چند گانه",
        "مقدار دهی متغیر"
      ]
    ]
  },
  "initialValues": {
    "description": "به‌طور پیش‌فرض، همه متغیرهای گرفته شده از `useObserver` مقادیر اولیه یکسانی دارند. برای تنظیم مقادیر اولیه متفاوت برای هر متغیر، میتونید از یکی از روش های زیر استفاده کنید:",
    "separate": {
      "explain": "در کد بالا، هوک `useObserver` را دوبار و به صورت جداگانه برای تعریف مقادیر اولیه مختلف برای `count` و `count1` استفاده کردیم."
    },
    "once": {
      "description": "اگر می خواهید مقادیر اولیه را برای همه متغیرها به طور همزمان تنظیم کنید، می توانید قبل از فراخوانی هوک `useObserver` آنها را مستقیما و با استفاده از متد `set`  موجود در `observer` استفاده کنید:",
      "explain": [
        "در کد بالا، قبل از فراخوانی هوک `useObserver` ، مقادیر اولیه `count` و `count1` را با استفاده از `observer.set` تنظیم می‌کنیم. این به ما امکان می‌دهد که متغیرها را بدون ارسال هیچونه آرگومان به هوک `useObserver` مقداردهی و استفاده کنیم، و آن متغیرها مقادیر اولیه‌ای را خواهند داشت که با استفاده از `observer.set` مشخص کردیم.",
        "به طور کلی، گرفتن چندین متغیر از `useObserver` می‌تواند به مختصر و خوانا تر شدن کد شما کمک کند، و تنظیم مقادیر اولیه متفاوت برای هر متغیر با استفاده از روش‌هایی که در بالا توضیح داده شد، آسان است."
      ]
    },
    "keywords": [
      [
        "رزما",
        "useObserver",
        "دریافت مقادیر",
        "مقادیر اولیه",
        "observer.set",
        "هوک های ری اکت",
        "بهینه سازی کد",
        "خوانایی کد",
        "مدیریت استیت",
        "برنامه نویسی فرانت اند"
      ]
    ]
  },
  "Demo": "پیش نمایش",
  "Counter App": "برنامه شمارنده",
  "No Order for Variables": "امکان جابجایی متغیر ها",
  "Case Insensitive Variables": "حساس نبودن به حروف بزرگ و کوچک",
  "the count is": "مقدار count برابر است با ",
  "Setting different initial values": "تنظیم مقادیر اولیه مختلف",
  "Define initial values separately": "مقادیر اولیه را جداگانه تعریف کنید",
  "Define initial values at once": "مقادیر اولیه را به یکباره تعریف کنید"
}
